---

# - name: Make sure mariadb is present
#   become: true
#   yum:
#     name: mariadb
#     state: present

# - name: Make sure pymysql is present
#   become: true
#   pip:
#     name: pymysql
#     state: present


- name: Download MySQL driver
  ansible.builtin.get_url:
    headers:
      user-agent: curl/7.81.0 # Mysql doesn't like ansible for some reason
    url: "{{ atl_mysql_jdbc_connector_url }}"
    dest: /tmp

- name: Unzip Mysql driver
  unarchive:
    src: "/tmp/{{ atl_mysql_jdbc_connector_url | basename }}"
    dest: "/tmp"

- name: Copy the MySQL driver
  copy:
    src: "/tmp/{{ atl_mysql_jdbc_connector }}/{{ atl_mysql_jdbc_connector }}.jar"
    dest: "{{ atl_product_installation_versioned }}/{{ atl_tomcat_lib_dir }}/{{ atl_mysql_jdbc_connector }}.jar"

- name: Install create_mycnf script
  ansible.builtin.copy:
    src: create_mycnf.sh
    dest: "/usr/local/bin/create_mycnf.sh"
    owner: "{{ atl_product_user }}"
    group: "{{ atl_product_user }}"
    mode: '0500'

- name: Install drop_all_tables script
  ansible.builtin.copy:
    src: drop_all_tables.sh
    dest: "/usr/local/bin/drop_all_tables.sh"
    owner: "{{ atl_product_user }}"
    group: "{{ atl_product_user }}"
    mode: '0500'

- name: Download mysqlsh
  ansible.builtin.get_url:
    headers:
      user-agent: curl/7.81.0
    url: "{{ atl_mysqlsh_url }}"
    dest: /tmp
    
- name: Install mysqlsh for backups
  ansible.builtin.apt:
    deb: "/tmp/{{ atl_mysqlsh_url | basename }}"

- name: Install PyMySQL client
  ansible.builtin.pip:
    name: PyMySQL
    
- name: Create application DB user
  mysql_user:
    config_file: ""
    login_host: "{{ atl_db_host }}"
    login_user: "{{ atl_rds_master_user }}"
    login_password: "{{ atl_rds_master_password }}"
    login_port: "{{ atl_db_port }}"
    name: "{{ atl_jdbc_user }}"
    password: "{{ atl_jdbc_password }}"
    priv: "{{ atl_db_app_config | json_query('user.priv') }}"

# - name: Create new application database
#   mysql_db:
#     config_file: ""
#     login_host: "{{ atl_db_host }}"
#     login_user: "{{ atl_rds_master_user }}"
#     login_password: "{{ atl_rds_master_password }}"
#     login_port: "{{ atl_db_port }}"
#     name: "{{ atl_jdbc_db_name }}"
#     encoding: "{{ atl_db_app_config | json_query('database.character_set') }}"
#     collation: "{{ atl_db_app_config | json_query('database.collation') }}"
#     register: db_created 
#     tags:
#       - new_only

    
- block:

# RDS does not allow changing the collation on an existing DB, it only allows collation change on creation of db. If the db already exists, we need the “create new application database” task to be skipped, idempotence can not be relied upon as we cant be certain the collation of the existing db
    - name: Create new application database
      mysql_db:
        config_file: ""
        login_host: "{{ atl_db_host }}"
        login_user: "{{ atl_rds_master_user }}"
        login_password: "{{ atl_rds_master_password }}"
        login_port: "{{ atl_db_port }}"
        name: "{{ atl_jdbc_db_name }}"
        encoding: "{{ atl_db_app_config | json_query('database.character_set') }}"
        collation: "{{ atl_db_app_config | json_query('database.collation') }}"
      register: db_created 
      tags:
        - new_only

    # - name: Assert ownership of public schema
    #   command: >
    #     mysql --user={{ atl_db_root_user }} --password={{ atl_db_root_password }} {{ atl_jdbc_db_name }}
    #     --host={{ atl_db_host }} --port={{ atl_db_port }} --batch --skip-column-names
    #     --execute="GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER,INDEX,REFERENCES on {{ atl_jdbc_db_name }}.* TO '{{ atl_jdbc_user }}'@'{{ atl_db_host }}' IDENTIFIED BY '{{ atl_jdbc_password }}'; flush privileges;"
    #   no_log: true

