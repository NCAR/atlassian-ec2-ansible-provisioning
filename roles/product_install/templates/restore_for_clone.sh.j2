#!/bin/bash

#
# FIXME ASSUME S3 URL LOOKS LIKE THIS:
#
# base_dir
#       - home
#       - database
#
# It's faster to sync an uncompressed home directory
# database directory should be as created by mysqlsh
#

APP="{{ atl_product_family }}"

s3_backup_url_raw=$1
if test -z "$s3_backup_url_raw"; then
       cat << EOF
Usage: $0 s3_backup_url

Restore cloned database and home directory for app "$APP";
s3_backup_url must contain files
- home.zst      App home tar archive
- database/   Backup as created by mysqlsh

WARNING: there is no way for the script to differentiate between a
simple restore of an existing site and the restore of a clone. If
handed an s3_url of the existing site, the script will go through the
whole clone procedure. Use restore_site.sh for that instead.

THE APPLICATION MUST BE STOPPED BEFORE RESTORE!
EOF
exit 1
fi

# Lop off last char if it's /
s3_backup_url=$(echo $s3_backup_url_raw | sed -e 's/^\(.*\)\/$/\1/')

if systemctl is-active --quiet $APP; then
    echo "Service \"$APP\" is running; must be stopped before restore."
    exit 1
fi

if ! aws s3 ls "${s3_backup_url}/home.zst" > /dev/null 2>&1; then
    echo "s3_backup_url doesn't have home tar archive"
    exit 1
fi

if ! aws s3 ls "${s3_backup_url}/database" > /dev/null 2>&1; then
    echo "s3_backup_url doesn't have database"
    exit 1
fi

#
mkdir -p /var/atlassian/application-data/tmp > /dev/null 2>&1
export TEMPDIR=$(mktemp -p /var/atlassian/application-data/tmp -d)

# Whatever version of the AWS API that mysqlsh is using, it needs
# credentials in env vars instead of the instance role
aws_env_vars=$(/usr/local/bin/aws_env_credentials_from_instance_role.sh)
source $aws_env_vars
rm $aws_env_vars

##############################################
# Restore home directory
##############################################
echo ">>> Restoring home directory from clone backup"

# Tar up local retained files
# Filenames are for find command
retained_files="${TEMPDIR}/retained_files_list"
for pattern in $(yq -r '.filesystem.retained[]' /var/clone_config.yaml); do
    (cd {{ atl_product_home }}; find . -type f -wholename "$pattern" >> $retained_files)
done
retained_files_tar="${TEMPDIR}/retained_files.zst"
if test -e $retained_files; then
    echo ">>> Retaining files: "
    cat $retained_files
    tar -C {{ atl_product_home }} --files-from=$retained_files --zstd -cf $retained_files_tar
fi

# Restore home directory
rm -rf "{{ atl_product_home }}/*" "{{ atl_product_home }}/.*"
aws s3 cp "${s3_backup_url}/home.zst" - | tar -C "{{ atl_product_home }}" --zstd -xf -

# untar retained over sync'd directory
if test -e $retained_files_tar; then
    tar -C {{ atl_product_home }} --zstd -xf $retained_files_tar
    chown -R {{ atl_product_user }}:{{ atl_product_user }} {{ atl_product_home }}
fi
    
##############################################
# Restore database
##############################################

# Reset baseurl at the the end
dest_baseurl="$(/usr/local/bin/get_baseurl.sh)"
dest_site="$(echo $dest_baseurl | awk -F/ '{print $3}')"

# Save stuff we need from the database.  We do this by creating dumps
# for these by passing queries to mysqldump
mycnf=$(/usr/local/bin/create_mycnf.sh)
mysql_to_restore="${TEMPDIR}/mysql_to_restore"
mkdir $mysql_to_restore

# Generate list of full tables to retain
full_tables="${TEMPDIR}/full_tables"
for raw_table in $(yq -r ".database.retained.tables[]" /var/clone_config.yaml); do
    if echo $raw_table | grep -Fq '%'; then
	mysql --defaults-file=$mycnf -sN -e "show tables like '${raw_table}';" >> $full_tables
    else
	echo $raw_table >> $full_tables
    fi
done

if test -s $full_tables; then 
    for table in $(cat $full_tables); do
	echo ">>> Dumping full table $table"
	mkdir -p "${mysql_to_restore}/${table}" >/dev/null 2>&1
	mysqldump --defaults-file=$mycnf \
		  --add-drop-table \
		  --create-options \
		  --disable-keys \
		  --set-gtid-purged=OFF \
		  {{ atl_jdbc_db_name }} $table > $(mktemp -p "${mysql_to_restore}/${table}")
    done
fi

# Queries
queried_tables=$(yq -r '.database.retained.queries | keys[]' /var/clone_config.yaml)
for table in $queried_tables; do
    echo ">>> Dumping query for table $table"    
    mkdir -p "${mysql_to_restore}/${table}" >/dev/null 2>&1
    while IFS="" read -r query|| [ -n "$query" ]; do
	mysqldump --defaults-file=$mycnf \
		  --disable-keys \
                  --no-create-info \
                  --no-tablespaces \
                  --replace \
                  --set-gtid-purged=OFF \
                  --single-transaction \
                  --skip-triggers \
		  --where="$query" \
		  {{ atl_jdbc_db_name }} $table > $(mktemp -p "${mysql_to_restore}/${table}")
    done < <(yq -r ".database.retained.queries.${table}[]" /var/clone_config.yaml)
done

# Parse s3_backup_url
bucketname=$(echo $s3_backup_url | cut -d '/' -f3)
prefix="$(echo $s3_backup_url | cut -d '/' -f4-)/database"

# Restore clone database over existing database
echo ">>> Restoring database from clone backup"
/usr/local/bin/drop_all_tables.sh
mysqlsh_cmd="${TEMPDIR}/mysqlsh_cmd"
cat << EOF >$mysqlsh_cmd
util.loadDump(
  "$prefix",
  {
    schema: "{{ atl_jdbc_db_name }}",
    s3BucketName: "$bucketname",
    progressFile: "",
    resetProgress: "true",
    threads: 8
  }
)
EOF
mysqlsh --defaults-file=$mycnf --javascript --file=$mysqlsh_cmd

# Generate list of tables for literal string substitutions
edit_tables="${TEMPDIR}/edit_tables"
touch $edit_tables
for raw_table in $(yq -r ".database.substitutions.tables[]" /var/clone_config.yaml); do
    if echo $raw_table | grep -Fq '%'; then
	mysql --defaults-file=$mycnf -sN -e "show tables like '${raw_table}';" >> $edit_tables
    else
	echo $raw_table >> $edit_tables
    fi
done

src_baseurl="$(/usr/local/bin/get_baseurl.sh)"
src_site="$(echo $src_baseurl | awk -F/ '{print $3}')"

# Dump table, replace strings
for table in $(cat $edit_tables); do
    echo ">>> Replacing strings in table $table"
    mkdir -p "${mysql_to_restore}/${table}" >/dev/null 2>&1
    tablesql=$(mktemp -p "${mysql_to_restore}/${table}")
    mysqldump --defaults-file=$mycnf \
	      --disable-keys \
              --no-create-info \
              --no-tablespaces \
              --replace \
              --set-gtid-purged=OFF \
              --single-transaction \
              --skip-triggers \
	      {{ atl_jdbc_db_name }} $table > $tablesql

    # Replace base url, then replace site
    perl -s -p -i -e 's/\Q$src\E/$dst/g' -- -src=$src_baseurl -dst=$dest_baseurl $tablesql
    perl -s -p -i -e 's/\Q$src\E/$dst/g' -- -src=$src_site -dst=$dest_site $tablesql
    
    for subst_str in $(yq -r ".database.substitutions.strings[]" /var/clone_config.yaml); do
	# https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
	subst_val=$(yq -r ".database.substitutions.strings.\"${subst_str}\"" /var/clone_config.yaml)
	perl -s -p -i -e 's/\Q$src\E/$dst/g' -- -src=$subst_str -dst=$subst_val $tablesql
    done
    
    if ! test -s $tablesql; then
	rm $tablesql
    fi
done

#
# Restore edited and retained data for database
#
# WARNING the order is undetermined, so dumpfile must not step on each
# other's toes
for table in $(ls $mysql_to_restore); do
    for f in $(ls "${mysql_to_restore}/${table}"); do
	echo ">>> Restoring retained data for table $table"
        dump="${mysql_to_restore}/${table}/${f}"
        mysql --defaults-file=$mycnf {{ atl_jdbc_db_name }} < $dump
    done
done

echo ">>> Resetting baseurl"
/usr/local/bin/set_baseurl.sh $dest_baseurl

##############################################
# Postprocess
# Run app-specific post-process script if it exists
##############################################
test -e /usr/local/bin/clone_postprocess && /usr/local/bin/clone_postprocess

rm -rf $TEMPDIR
rm $mycnf
