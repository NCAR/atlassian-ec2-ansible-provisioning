#!/bin/bash

tag=$1

bucket_url="{{ atl_s3_path }}backups/$(date --iso-8601=seconds)"

if ! test -z "$tag"; then
    bucket_url="${bucket_url}-${tag}"
fi

echo ">>> Backing up to $bucket_url"

bucketname=$(echo $bucket_url  | cut -d '/' -f3)

# Whatever version of the AWS API that mysqlsh is using, it needs
# credentials in env vars instead of the instance role
aws_env_vars=$(/usr/local/bin/aws_env_credentials_from_instance_role.sh)
source $aws_env_vars
rm $aws_env_vars

#
# DB backup
#
bucket_db_path="$(echo $bucket_url  | cut -d '/' -f4-)/database"
mysqlsh_cmd=$(mktemp)
cat << EOF >$mysqlsh_cmd
util.dumpSchemas(
  ["{{ atl_jdbc_db_name }}"],
  "$bucket_db_path",
  {
    s3BucketName: "$bucketname"
  }
)
EOF

mycnf=$(/usr/local/bin/create_mycnf.sh)

echo ">>> Backing up database to ${bucket_url}/database, starting $(date)"

mysqlsh --defaults-file=$mycnf --javascript --file=$mysqlsh_cmd
mysqlsh_status=$?
rm $mysqlsh_cmd
rm $mycnf

if [ "$mysqlsh_status" != "0" ]; then
    echo "Mysqlsh command failed"
    exit 1
fi

#
# FS backup; use tar to preserve symlinks
#
echo ">>> Backing up home filesystem, starting $(date)"
tar --one-file-system -C "{{ atl_product_home }}" -zcf - . | s5cmd pipe "${bucket_url}/home.tgz"

#home_fs="{{ atl_product_home }}"
#bucket_fs_url="${bucket_url}/home/"
#s5cmd sync --exclude "*.snapshot/*" "${home_fs}/" "${bucket_fs_url}"

echo ">>> Finished at: " $(date)
echo "Total elapsed time: " $(printf '%dh:%dm:%ds\n' $(($SECONDS/3600)) $(($SECONDS%3600/60)) $((SECONDS%60)))

