---
- name: Create cluster config
  ansible.builtin.template:
    src: cluster.properties.j2
    dest: "{{ atl_product_home }}/cluster.properties"
    owner: "{{ atl_product_user }}"

- name: Create server config
  ansible.builtin.template:
    src: server.xml.j2
    dest: "{{ atl_product_installation_versioned }}/conf/server.xml"

- name: Check for a jira-config.properties in the shared home
  ansible.builtin.stat:
    path: "{{ atl_product_home_shared }}/jira-config.properties"
  register: jira_config_properties

- name: Copy jira-config.properties if exists
  ansible.builtin.copy:
    remote_src: true
    src: "{{ atl_product_home_shared }}/jira-config.properties"
    dest: "{{ atl_product_home }}/jira-config.properties"
    owner: "{{ atl_product_user }}"
    group: "{{ atl_product_user }}"
    mode: 0644
  when: jira_config_properties.stat.exists

- name: Override JVM memory settings.
  # Ugly but necessary as the product installs this file so we need to make the change here.
  ansible.builtin.lineinfile:
    path: "{{ atl_product_installation_versioned }}/bin/setenv.sh"
    backrefs: true
    regexp: "^{{ item }}="
    line: "{{ item }}=\"{{ atl_jvm_heap }}\""
  with_items:
    - 'JVM_MINIMUM_MEMORY'
    - 'JVM_MAXIMUM_MEMORY'

- name: Use s3 for attachments when given an attachments bucket
  ansible.builtin.template:
    src:  filestore-config.xml.j2
    dest: "{{ atl_product_home }}/filestore-config.xml"
    owner: "{{ atl_product_user }}"
    group: "{{ atl_product_user }}"
    mode: '0440'
  when:
    - atl_attachments_bucket is defined

- name: Set Jira home directory
  ansible.builtin.lineinfile:
    path: "{{ atl_product_installation_versioned }}/bin/setenv.sh"
    regexp: "JIRA_HOME="
    line: 'JIRA_HOME="{{ atl_product_home }}"'

- name: Set the Tomcat environment
  ansible.builtin.lineinfile:
    path: "{{ atl_product_installation_versioned }}/bin/setenv.sh"
    insertafter: "EOF"
    line: 'export CATALINA_OPTS="${CATALINA_OPTS} {{ atl_catalina_opts }} {{ atl_catalina_opts_extra }}"'

- name: Set support recommended JVM args
  ansible.builtin.lineinfile:
    path: "{{ atl_product_installation_versioned }}/bin/setenv.sh"
    regexp: "JVM_SUPPORT_RECOMMENDED_ARGS="
    line: 'JVM_SUPPORT_RECOMMENDED_ARGS="{{ atl_jvm_opts }}"'

- name: Create application directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0750
    owner: "{{ atl_product_user }}"
    group: "{{ atl_product_user }}"
  with_items:
    - "{{ atl_product_home }}"
    - "{{ atl_product_home_shared }}"
    - "{{ atl_product_shared_plugins }}"
  changed_when: false  # For Molecule idempotence check

- name: Limit permissions on the installer temp directory, recursively
  ansible.builtin.file:
    path: "{{ atl_installer_temp }}"
    owner: "root"
    group: "root"
    mode: "u=rwX,g=rX,o=rX"
    recurse: true
  changed_when: false  # For Molecule idempotence check

- name: Limit permissions on the installation directory, non-recursively
  ansible.builtin.file:
    path: "{{ atl_product_installation_versioned }}"
    owner: "root"
    group: "root"
    mode: "u=rwX,g=rX,o=rX"
  changed_when: false  # For Molecule idempotence check

- name: Find top-level files/directories in installation directory, excluding working directories
  ansible.builtin.find:
    paths: "{{ atl_product_installation_versioned }}"
    depth: 1
    file_type: any
    excludes: logs,temp,work
  register: atl_product_installation_versioned_file_list

- name: Limit permissions on files and directories in the installation directory, recursively, excluding working directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: "root"
    group: "root"
    mode: "u=rwX,g=rX,o=rX"
    recurse: "{{ item.isdir }}"
  loop: "{{ atl_product_installation_versioned_file_list.files }}"
  changed_when: false  # For Molecule idempotence check

- name: Grant access to the product working directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "u=rwX,g=rX,o-rwx"
    owner: "{{ atl_product_user }}"
    group: "{{ atl_product_user }}"
    recurse: true
  with_items:
    - "{{ atl_product_installation_versioned }}/logs"
    - "{{ atl_product_installation_versioned }}/temp"
    - "{{ atl_product_installation_versioned }}/work"
  changed_when: false  # For Molecule idempotence check

- name: Create conf/Catalina directory owned by product so catalina.out logging works
  ansible.builtin.file:
    path: "{{ atl_product_installation_versioned }}/conf/Catalina"
    state: directory
    mode: "u=rwX,g=rX,o-rwx"
    owner: "{{ atl_product_user }}"
    group: "{{ atl_product_user }}"
  changed_when: false  # For Molecule idempotence check
      
- name: Install get_baseurl.sh (used by restore_for_clone.sh)
  ansible.builtin.copy:
    src: get_baseurl.sh
    dest: /usr/local/bin/get_baseurl.sh
    owner: "{{ atl_product_user }}"
    group: "{{ atl_product_user }}"
    mode: '0500'

- name: Install set_baseurl.sh (used by restore_for_clone.sh)
  ansible.builtin.copy:
    src: set_baseurl.sh
    dest: /usr/local/bin/set_baseurl.sh
    owner: "{{ atl_product_user }}"
    group: "{{ atl_product_user }}"
    mode: '0500'

# This gets run as a systemd pre-exec script everytime jira runs. This
# is ugly but this file gets overwritten by the install wizard and
# also anytime jira thinks it contains a plaintext password which it
# replaces with ATL_SECURED
- name: Install script to hack AWS secrets manager config into dbconfig.xml
  ansible.builtin.template:  
    src: dbconfig_enable_aws_secrets.sh.j2
    dest: /usr/local/bin/dbconfig_enable_aws_secrets.sh
    owner: "{{ atl_product_user }}"
    group: "{{ atl_product_user }}"
    mode: '0500'

- name: Install clone_config.yaml (used by restore_for_clone.sh)
  ansible.builtin.copy:
    src: clone_config.yaml
    dest: /var/clone_config.yaml
    owner: "{{ atl_product_user }}"
    group: "{{ atl_product_user }}"
    mode: '0400'
    
# This gets run by restore_for_clone.sh
- name: Install clone_postprocess.sh script
  ansible.builtin.template:
    src: clone_postprocess.sh.j2
    dest: "/usr/local/bin/clone_postprocess.sh"
    owner: "{{ atl_product_user }}"
    group: "{{ atl_product_user }}"
    mode: '0500'

#
# Hack in a config directory to be read by setenv.sh
#
- name: Create jira custom startup config dir
  ansible.builtin.file:
    path: "{{ atl_jvm_custom_opts_dir }}"
    state: directory
    mode: "0700"
    owner: "{{ atl_product_user }}"
    group: "{{ atl_product_user }}"

- name: Insert conf.d mechanism in setenv.sh file
  ansible.builtin.blockinfile:
    path: "{{ atl_product_installation_versioned }}/bin/setenv.sh"
    insertbefore: "export JAVA_OPTS"
    prepend_newline: true
    append_newline: true
    block: |
      JVM_CUSTOM_ARGS=$(cat {{ atl_product_installation_current }}/bin/jvm_custom_opts.d/* 2>/dev/null  | tr "\n" " ")
      JAVA_OPTS="${JAVA_OPTS} ${JVM_CUSTOM_ARGS}"

- name: Install recovery_admin script
  ansible.builtin.template:
    src: recovery_admin.sh.j2
    dest: "/usr/local/bin/recovery_admin.sh"
    owner: "{{ atl_product_user }}"
    group: "{{ atl_product_user }}"
    mode: '0500'

- name: Install script to toggle email at tomcat level
  ansible.builtin.template:
    src: toggle_email.sh.j2
    dest: "/usr/local/bin/toggle_email.sh"
    owner: "{{ atl_product_user }}"
    group: "{{ atl_product_user }}"
    mode: '0500'
    
