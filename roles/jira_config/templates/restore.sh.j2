#!/bin/bash

APP=jira
backupdir=$1

# Where we extract attachments and avatars to if we're upload to s3
# Might need to be large
S3_TMPDIR='/var/atlassian/application-data'

if test -z $backupdir || ! test -d $backupdir; then
   cat << EOF
Usage: $0 backup_dir

Restore database and home directory for app "$APP";
backupdir must contain files home.tgz and db.sql.gz

THE APPLICATION SHOULD BE STOPPED BEFORE RESTORE!
EOF
exit 1
fi

if systemctl is-active --quiet $APP; then
    echo "Service \"$APP\" is running; must be stopped before restore."
    exit 1
fi

if ! test -e "${backupdir}/home.tgz"; then
    echo "Backup dir is missing file home.tgz"
    exit 1
fi

if ! test -e "${backupdir}/db.sql.gz"; then
    echo "Backup dir is missing file db.sql.gz"
    exit 1
fi

#
# Restore home directory
#
excludes=$(mktemp)
cat <<EXCLUDES >$excludes
*/dbconfig.xml
*/keys/*
*/filestore-config.yaml
*/secrets-config.yaml
*/secured/*
./log/*
EXCLUDES

attachments_bucket='{{ atl_attachments_bucket }}'
if ! test -z $attachments_bucket; then
    echo './data/attachments/*' >> $excludes
    echo './data/avatars/*' >> $excludes
fi

homedir="/var/atlassian/application-data/${APP}"
echo "Restoring home directory"
tar -C $homedir -X $excludes -zxf "${backupdir}/home.tgz" .
chown -R {{ atl_product_user }}:{{ atl_product_user }} $homedir
rm $excludes


#
# Upload attachments to S3 if we're using that
#
if ! test -z $attachments_bucket; then
    for t in attachments avatars; do
	echo "Extracting $t for upload to s3"
	tmpdir=$(mktemp -d -p $S3_TMPDIR)
	tar -C $tmpdir -zxf "${backupdir}/home.tgz" "./${t}/"
	echo "Syncing ${t} to S3"
	aws s3 sync $tmpdir "s3://${attachments_bucket}/${t}" --delete
	rm -rf $tmpdir
    done
fi

mycnf=$(/usr/local/bin/create_mycnf.sh)

#
# Change the baseurl FQDN in the dump to our current one on restore
#
src_site_fqdn=$(cat "${homedir}/SITE_FQDN")
if [ -z $src_site_fqdn ]; then
    echo "Empty or missing file \"${homedir}/SITE_FQDN\"; don't know source FQDN for processing DB dump"
    exit 1
fi

target_site_fqdn=$(mysql --defaults-file=$mycnf -sre "select propertyvalue from propertyentry PE join propertystring PS on PE.id=PS.id where PE.property_key = 'jira.baseurl';" | perl -ne 'm(\Qhttps://\E(.*)) && print $1;')

echo "Restoring database"
gunzip < "${backupdir}/db.sql.gz" \
    | perl -pe "s/\Q$src_site_fqdn\E/$target_site_fqdn/g" \
    | perl -pe 's/DEFINER=.*?(?=[* ])/DEFINER=CURRENT_USER/;' \
    | mysql --defaults-file=$mycnf

## Save transformed db dump for debugging
#
# gunzip < "${backupdir}/db.sql.gz" \
#     | perl -pe "s/\Q$src_site_fqdn\E/$target_site_fqdn/g" \
#     | perl -pe 's/DEFINER=.*?(?=[* ])/DEFINER=CURRENT_USER/;' >  "${backupdir}/db_transformed.sql"
# mysql --defaults-file=$mycnf < "${backupdir}/db_transformed.sql"

rm "${homedir}/SITE_FQDN"
rm $mycnf
